generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  pin       String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  address   String
  name      String     @unique
  phone     String
  role      UserRole
  status    UserStatus @default(ACTIVE)
  orders    Order[] // Relacionamento para todas as ordens do Utilizador
}

model Company {
  id            String   @id @default(cuid())
  name          String   @unique
  email         String   @unique
  capitalSocial Float
  nif           String   @unique
  phone         String
  address       String
  logo          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Table {
  id        String   @id @default(cuid())
  number    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[] // Relacionamento para todas as ordens da mesa
}

model Order {
  id        String   @id @default(cuid())
  orderId   Int      @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  dateOrder DateTime
  NifClient String?

  totalTax   Float @default(0)
  totalPrice Float @default(0)

  status OrderStatus @default(PENDING)

  userId  String?
  User    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tableId String?
  Table   Table?  @relation(fields: [tableId], references: [id], onDelete: Cascade)

  PaymentMethod PaymentMethod? @default(CASH)
  OrderProduct  OrderProduct[]
}

model Product {
  id        String   @id @default(cuid())
  name      String
  price     Float
  image     String
  tax       Tax
  discount  Int?     @default(0)
  stock     Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productCategoryId String?
  ProductCategory   ProductCategory?    @relation(fields: [productCategoryId], references: [id])
  ProductIngredient ProductIngredient[]
  OrderProduct      OrderProduct[]
}

model ProductIngredient {
  id           String     @id @default(cuid())
  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    String
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  ingredientId String
  quantity     Int // Quantidade do ingrediente no produto
  maxQuantity  Int? // Quantidade máxima permitida

  @@unique([productId, ingredientId]) // Restrição de chave única composta
}

model OrderProduct {
  id              String            @id @default(cuid())
  quantity        Int
  product         Product?          @relation(fields: [productId], references: [id])
  productId       String?
  order           Order?            @relation(fields: [orderId], references: [id])
  orderId         String
  OrderIngredient OrderIngredient[]
}

model Ingredient {
  id              String              @id @default(cuid())
  name            String
  image           String
  stock           Int                 @default(0)
  createdAt       DateTime            @default(now())
  products        ProductIngredient[]
  OrderIngredient OrderIngredient[]
}

model OrderIngredient {
  id                String       @id @default(cuid())
  orderProduct      OrderProduct @relation(fields: [orderProductId], references: [id])
  orderProductId    String
  ingredient        Ingredient   @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  ingredientId      String
  cookingPreference String?
}

model ProductCategory {
  id        String    @id @default(cuid())
  name      String    @unique
  icon      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

enum Tax {
  REDUCED // Taxa reduzida, 6%
  INTERMEDIATE // Taxa intermédia, 13%
  STANDARD // Taxa normal, 23%
}

enum PaymentMethod {
  CASH
  BANK
}

enum UserRole {
  ADMIN
  MANAGER
  EMPLOYEE
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}
