generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  pin       String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  address   String
  name      String     @unique
  phone     String
  role      UserRole
  status    UserStatus @default(ACTIVE)
  company   Company?   @relation(fields: [companyId], references: [id])
  companyId String?
  orders    Order[] // Relacionamento para todas as ordens do usuário
}

model Company {
  id        String   @id @default(cuid())
  name      String   @unique
  email     String   @unique
  phone     String
  address   String
  logo      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tables    Table[]
  users     User[]
}

model Table {
  id        String   @id @default(cuid())
  number    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company? @relation(fields: [companyId], references: [id])
  companyId String?
  orders    Order[] // Relacionamento para todas as ordens da mesa
}

model Ingredient {
  id              String              @id @default(cuid())
  name            String
  price           Float
  image           String
  createdAt       DateTime            @default(now())
  products        ProductIngredient[]
  OrderIngredient OrderIngredient[]
}

model Order {
  id         String      @id @default(cuid())
  orderId    Int         @default(autoincrement())
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  totalPrice Float       @default(0) // Valor padrão para o preço total
  nif        String?
  status     OrderStatus @default(PENDING)
  userId     String?
  User       User?       @relation(fields: [userId], references: [id])
  tableId    String?
  Table      Table?      @relation(fields: [tableId], references: [id])
  products   Product[]

  OrderIngredient OrderIngredient[]
}

model Product {
  id                 String              @id @default(cuid())
  name               String
  price              Float
  image              String
  tax                Tax
  discount           Int?                @default(0)
  category           ProductCategory
  stock              Int?                @default(0)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  productIngredients ProductIngredient[]
  orders             Order[] // Relacionamento com as ordens em que o produto foi incluído
}

model ProductIngredient {
  id           String     @id @default(cuid())
  product      Product    @relation(fields: [productId], references: [id])
  productId    String
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId String
  quantity     Int // Quantidade do ingrediente no produto
  maxQuantity  Int? // Quantidade máxima permitida

  @@unique([productId, ingredientId]) // Restrição de chave única composta
}

model OrderIngredient {
  id           String     @id @default(cuid())
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId String
  quantity     Int // Quantidade do ingrediente no produto
  maxQuantity  Int? // Quantidade máxima permitida
  Order        Order?     @relation(fields: [orderId], references: [id])
  orderId      String?
}

enum ProductCategory {
  DRINK
  FOOD
  DESSERT
}

enum Tax {
  REDUCED // Taxa reduzida, geralmente 6%
  INTERMEDIATE // Taxa intermédia, geralmente 13%
  STANDARD // Taxa normal, geralmente 23%
}

enum UserRole {
  ADMIN
  MANAGER
  EMPLOYEE
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}
