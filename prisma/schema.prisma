generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  pin       String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  address   String
  name      String     @unique
  phone     String
  role      UserRole
  status    UserStatus @default(ACTIVE)
  orders    Order[]
}

model Company {
  id            String   @id @default(cuid())
  name          String   @unique
  email         String   @unique
  phone         String
  address       String
  logo          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  capitalSocial Float
  nif           String   @unique
}

model Table {
  id        String   @id @default(cuid())
  number    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model Order {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  tableId       String?
  userId        String?
  orderId       Int            @default(autoincrement())
  status        OrderStatus    @default(PENDING)
  totalPrice    Float          @default(0)
  NifClient     String?
  PaymentMethod PaymentMethod? @default(CASH)
  totalTax      Float          @default(0)
  dateOrder     DateTime
  Table         Table?         @relation(fields: [tableId], references: [id], onDelete: Cascade)
  User          User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  OrderProduct  OrderProduct[]
}

model Product {
  id                String              @id @default(cuid())
  name              String
  price             Float
  image             String
  tax               Tax
  discount          Int?                @default(0)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  stock             Int?                @default(0)
  productCategoryId String?
  OrderProduct      OrderProduct[]
  ProductCategory   ProductCategory?    @relation(fields: [productCategoryId], references: [id])
  ProductIngredient ProductIngredient[]
}

model ProductIngredient {
  id           String     @id @default(cuid())
  productId    String
  ingredientId String
  quantity     Int
  maxQuantity  Int?
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, ingredientId])
}

model OrderProduct {
  id              String            @id @default(cuid())
  quantity        Int
  productId       String?
  orderId         String
  OrderIngredient OrderIngredient[]
  order           Order             @relation(fields: [orderId], references: [id])
  product         Product?          @relation(fields: [productId], references: [id])
}

model Ingredient {
  id              String              @id @default(cuid())
  name            String
  image           String
  createdAt       DateTime            @default(now())
  stock           Int                 @default(0)
  OrderIngredient OrderIngredient[]
  products        ProductIngredient[]
}

model OrderIngredient {
  id                String       @id @default(cuid())
  ingredientId      String
  orderProductId    String
  cookingPreference String?
  ingredient        Ingredient   @relation(fields: [ingredientId], references: [id], onDelete: Cascade)
  orderProduct      OrderProduct @relation(fields: [orderProductId], references: [id])
}

model ProductCategory {
  id        String    @id @default(cuid())
  name      String    @unique
  icon      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

enum Tax {
  REDUCED
  INTERMEDIATE
  STANDARD
}

enum PaymentMethod {
  CASH
  BANK
}

enum UserRole {
  ADMIN
  MANAGER
  EMPLOYEE
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}
