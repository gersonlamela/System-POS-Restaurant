generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  pin       String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  address   String
  name      String     @unique
  phone     String
  role      UserRole
  status    UserStatus @default(ACTIVE)
  company   Company?   @relation(fields: [companyId], references: [id])
  companyId String?
  orders    Order[] // Relacionamento para todas as ordens do usuário
}

model Company {
  id            String   @id @default(cuid())
  name          String   @unique
  email         String   @unique
  capitalSocial Float
  nif           String   @unique
  phone         String
  address       String
  logo          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  tables        Table[]
  users         User[]
  orders        Order[]
}

model Table {
  id        String   @id @default(cuid())
  number    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company? @relation(fields: [companyId], references: [id])
  companyId String?
  orders    Order[] // Relacionamento para todas as ordens da mesa
}

model Ingredient {
  id              String              @id @default(cuid())
  name            String
  price           Float
  image           String
  createdAt       DateTime            @default(now())
  products        ProductIngredient[]
  OrderIngredient OrderIngredient[]
}

model Order {
  id        String   @id @default(cuid())
  orderId   Int      @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  dataOrder DateTime
  NifClient String?

  totalTax   Float @default(0) // Valor padrão para o preço total
  totalPrice Float @default(0) // Valor padrão para o preço total

  status OrderStatus @default(PENDING)

  userId   String?
  User     User?     @relation(fields: [userId], references: [id])
  tableId  String?
  Table    Table?    @relation(fields: [tableId], references: [id])
  products Product[]

  productQuantity Int?
  OrderIngredient OrderIngredient[]
  Company         Company?          @relation(fields: [companyId], references: [id])
  companyId       String?

  PaymentMethod PaymentMethod? @default(CASH)
}

model Product {
  id                String              @id @default(cuid())
  name              String
  price             Float
  image             String
  tax               Tax
  discount          Int?                @default(0)
  stock             Int?                @default(0)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  orders            Order[] // Relacionamento com as ordens em que o produto foi incluído
  OrderIngredient   OrderIngredient[]
  productCategoryId String?
  ProductCategory   ProductCategory?    @relation(fields: [productCategoryId], references: [id])
  ProductIngredient ProductIngredient[]
}

model ProductIngredient {
  id           String     @id @default(cuid())
  product      Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    String
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId String
  quantity     Int // Quantidade do ingrediente no produto
  maxQuantity  Int? // Quantidade máxima permitida

  @@unique([productId, ingredientId]) // Restrição de chave única composta
}

model OrderIngredient {
  id           String     @id @default(cuid())
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId String
  product      Product?   @relation(fields: [productId], references: [id])
  productId    String?
  quantity     Int // Quantidade do ingrediente no produto
  maxQuantity  Int? // Quantidade máxima permitida
  order        Order?     @relation(fields: [orderId], references: [id])
  orderId      String?
}

model ProductCategory {
  id        String    @id @default(cuid())
  name      String    @unique
  icon      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

enum Tax {
  REDUCED // Taxa reduzida, 6%
  INTERMEDIATE // Taxa intermédia, 13%
  STANDARD // Taxa normal, 23%
}

enum PaymentMethod {
  CASH
  BANK
}

enum UserRole {
  ADMIN
  MANAGER
  EMPLOYEE
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}
